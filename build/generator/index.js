"use strict";
/**
 * @file Entrypoint of the SDK generator
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const typedeps_1 = require("../analyzer/typedeps");
const logging_1 = require("../logging");
const genmodules_1 = require("./genmodules");
const gentypes_1 = require("./gentypes");
const prettier_1 = require("./prettier");
const sdk_interface_1 = require("./sdk-interface");
function generatorCli(config, sdkContent) {
    return __awaiter(this, void 0, void 0, function* () {
        const prettifyOutput = config.prettify !== false;
        if (!prettifyOutput) {
            (0, logging_1.debug)('NOTE: files will not be prettified with Prettier');
        }
        const output = path.resolve(process.cwd(), config.sdkOutput);
        if (fs.existsSync(output)) {
            if (config.overwriteOldOutputDir === false) {
                (0, logging_1.panic)("Please provide an output directory that doesn't exist yet");
            }
            else {
                if (!fs.existsSync(path.join(output, 'central.ts'))) {
                    (0, logging_1.panic)("Provided output path exists but doesn't seem to contain an SDK output. Please check the output directory.");
                }
                else {
                    fs.rmSync(output, { recursive: true });
                }
            }
        }
        const outputParentDir = path.dirname(output);
        if (!fs.existsSync(outputParentDir)) {
            (0, logging_1.panic)("Output directory's parent {magentaBright} does not exist.", outputParentDir);
        }
        fs.mkdirSync(output);
        const prettierConfig = prettifyOutput ? (0, prettier_1.findPrettierConfig)(config) : {};
        const writeScriptTo = (parentDir, file, utf8Content) => {
            if (file.endsWith('.ts')) {
                utf8Content =
                    '/// Auto-generated file (nest-sdk-generator)\n' +
                        '/// Please do not edit this file - re-generate the SDK using the generator instead.\n' +
                        (config.generateTimestamps !== false ? '/// Generated on: ' + new Date().toUTCString() + '\n' : '') +
                        '///\n' +
                        utf8Content;
            }
            const fullPath = path.resolve(output, parentDir !== null && parentDir !== void 0 ? parentDir : '', file);
            fs.mkdirSync(path.dirname(fullPath), { recursive: true });
            fs.writeFileSync(fullPath, prettifyOutput ? (0, prettier_1.prettify)(utf8Content, prettierConfig, file.endsWith('.json') ? 'json' : 'typescript') : utf8Content, 'utf8');
        };
        (0, logging_1.println)('> Generating type files...');
        for (const [file, content] of (0, gentypes_1.generateSdkTypeFiles)(sdkContent.types)) {
            writeScriptTo('_types', (0, typedeps_1.normalizeExternalFilePath)(file), content);
        }
        (0, logging_1.println)('> Generating modules...');
        for (const [file, content] of (0, genmodules_1.generateSdkModules)(sdkContent.modules)) {
            writeScriptTo(null, file, content);
        }
        const sdkInterfacePath = path.resolve(process.cwd(), config.sdkInterfacePath);
        const relativeSdkInterfacePath = path
            .relative(output, sdkInterfacePath)
            .replace(/\\/g, '/')
            .replace(/\.([jt]sx?)$/, '');
        writeScriptTo(null, 'central.ts', `export { request } from "${relativeSdkInterfacePath}"`);
        if (!fs.existsSync(sdkInterfacePath) && config.generateDefaultSdkInterface !== false) {
            (0, logging_1.println)('├─ Generating default SDK interface...');
            fs.writeFileSync(sdkInterfacePath, sdk_interface_1.defaultSdkInterface, 'utf8');
        }
    });
}
exports.default = generatorCli;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZ2VuZXJhdG9yL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7Ozs7Ozs7Ozs7QUFFSCx5QkFBd0I7QUFDeEIsNkJBQTRCO0FBRTVCLG1EQUFnRTtBQUVoRSx3Q0FBa0Q7QUFDbEQsNkNBQWlEO0FBQ2pELHlDQUFpRDtBQUNqRCx5Q0FBeUQ7QUFDekQsbURBQXFEO0FBRXJELFNBQThCLFlBQVksQ0FBQyxNQUFjLEVBQUUsVUFBc0I7O1FBQy9FLE1BQU0sY0FBYyxHQUFHLE1BQU0sQ0FBQyxRQUFRLEtBQUssS0FBSyxDQUFBO1FBRWhELElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDbkIsSUFBQSxlQUFLLEVBQUMsa0RBQWtELENBQUMsQ0FBQTtTQUMxRDtRQUVELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUU1RCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDekIsSUFBSSxNQUFNLENBQUMscUJBQXFCLEtBQUssS0FBSyxFQUFFO2dCQUMxQyxJQUFBLGVBQUssRUFBQywyREFBMkQsQ0FBQyxDQUFBO2FBQ25FO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFlBQVksQ0FBQyxDQUFDLEVBQUU7b0JBQ25ELElBQUEsZUFBSyxFQUFDLDJHQUEyRyxDQUFDLENBQUE7aUJBQ25IO3FCQUFNO29CQUNMLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7aUJBQ3ZDO2FBQ0Y7U0FDRjtRQUVELE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxD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